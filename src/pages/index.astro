---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Astro Cardano with In-Memory Storage">
  <main>
    <h1>Welcome to Astro Cardano with In-Memory Storage</h1>
    <div id="wallet-info">
      <button id="connect-wallet">Connect Cardano Wallet</button>
      <p id="wallet-address"></p>
      <p id="wallet-balance"></p>
      <p id="wallet-error" style="color: red;"></p>
    </div>
    <div id="storage-demo">
      <h2>Storage Demo</h2>
      <input type="text" id="storage-key" placeholder="Enter key">
      <input type="text" id="storage-value" placeholder="Enter value">
      <button id="add-item">Add Item</button>
      <button id="get-all-items">Get All Items</button>
      <div id="storage-items"></div>
    </div>
  </main>
</Layout>

<script>
  import CardanoWallet from '../components/CardanoWallet.js';
  import InMemoryStorage from '../components/OrbitDB.js';

  const connectWalletBtn = document.getElementById('connect-wallet');
  const walletAddressEl = document.getElementById('wallet-address');
  const walletBalanceEl = document.getElementById('wallet-balance');
  const walletErrorEl = document.getElementById('wallet-error');
  const storageKeyInput = document.getElementById('storage-key') as HTMLInputElement;
  const storageValueInput = document.getElementById('storage-value') as HTMLInputElement;
  const addItemBtn = document.getElementById('add-item');
  const getAllItemsBtn = document.getElementById('get-all-items');
  const storageItemsEl = document.getElementById('storage-items');

  if (connectWalletBtn) {
    connectWalletBtn.addEventListener('click', async () => {
      try {
        const address = await CardanoWallet.connect();
        if (walletAddressEl) walletAddressEl.textContent = `Address: ${address}`;
        const balance = await CardanoWallet.getBalance();
        if (walletBalanceEl) walletBalanceEl.textContent = `Balance: ${balance} ADA`;
        if (walletErrorEl) walletErrorEl.textContent = '';
      } catch (error) {
        console.error('Error connecting wallet:', error);
        if (walletErrorEl) walletErrorEl.textContent = error instanceof Error ? error.message : 'An unknown error occurred';
      }
    });
  }

  if (addItemBtn) {
    addItemBtn.addEventListener('click', async () => {
      const key = storageKeyInput?.value;
      const value = storageValueInput?.value;
      if (key && value) {
        try {
          await InMemoryStorage.addItem(key, value);
          if (storageKeyInput) storageKeyInput.value = '';
          if (storageValueInput) storageValueInput.value = '';
          alert('Item added successfully');
        } catch (error) {
          console.error('Error adding item:', error);
          alert(error instanceof Error ? error.message : 'An unknown error occurred');
        }
      } else {
        alert('Please enter both key and value');
      }
    });
  }

  if (getAllItemsBtn) {
    getAllItemsBtn.addEventListener('click', async () => {
      try {
        const items = await InMemoryStorage.getAllItems();
        if (storageItemsEl) {
          storageItemsEl.innerHTML = '';
          for (const [key, value] of Object.entries(items)) {
            const itemEl = document.createElement('p');
            itemEl.textContent = `${key}: ${value}`;
            storageItemsEl.appendChild(itemEl);
          }
        }
      } catch (error) {
        console.error('Error getting items:', error);
        alert(error instanceof Error ? error.message : 'An unknown error occurred');
      }
    });
  }

  // Initialize In-Memory Storage
  InMemoryStorage.init().catch((error) => {
    console.error('Error initializing In-Memory Storage:', error);
    alert('Failed to initialize In-Memory Storage');
  });
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    max-width: 800px;
    font-family: system-ui, sans-serif;
  }
  h1 {
    font-size: 3rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  #wallet-info, #storage-demo {
    margin-bottom: 2rem;
  }
  input, button {
    margin: 0.5rem 0;
  }
</style>
